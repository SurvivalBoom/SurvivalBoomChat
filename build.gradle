plugins {
    id 'java'
}

group = 'net.survivalboom.survivalboomchat'
version = '1.2'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "PlaceholderAPI"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        name 'codemc'
        url 'https://repo.codemc.org/repository/maven-public/'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly "io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT"
    compileOnly "me.clip:placeholderapi:2.11.5"
    compileOnly 'net.skinsrestorer:skinsrestorer-api:15.0.15'
    compileOnly 'org.json:json:20231013'
    implementation 'com.github.Anon8281:UniversalScheduler:0.1.6'
    compileOnly "dev.folia:folia-api:1.20.4-R0.1-SNAPSHOT"
    compileOnly fileTree(dir: new File(project.rootDir, "libs"), include: ['Vault.jar'])
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

jar {
    destinationDirectory.set(project.getRootDir())
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from(sourceSets.main.output)
    project.configurations.runtimeClasspath.forEach(file -> {
        if (file.isDirectory()) from(file)
        else from(zipTree(file))
    })
    println("--- --- --- ---")
    println(String.format("OUTPUT JAR PATH: %s", archivePath.getAbsolutePath()))
    println("--- --- --- ---")
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
    options.encoding = 'UTF-8'
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
